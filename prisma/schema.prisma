// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Application {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  businessUnit String
  description String?
  ownerName   String?
  ownerEmail  String?
  integrationOwnerName String?
  state       String   @default("OnBoarding") // OnBoarding, Integration, Production, Cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  useCases         UseCase[]
  activities       Activity[]
  score            ApplicationScore?

  @@map("applications")
}

model UseCase {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  applicationId String @db.ObjectId

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("use_cases")
}



model ApplicationScore {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  applicationId          String @unique @db.ObjectId
  implementationLevel    String // Basic, Intermediate, Advanced
  classification         String?
  apiAvailability        String?
  teamInvolvement        String?
  readinessStatus        String // Very ready, Medium readiness, Low readiness
  technicalScore         Float?
  businessScore          Float?
  resourceScore          Float?
  totalScore             Float?
  grade                  String // Grade 1, Grade 2, Grade 3
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_scores")
}

model Activity {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  applicationId String   @db.ObjectId
  title         String
  description   String?
  type          String   // CREATED, UPDATED, SCORED, REVIEWED, etc.
  status        String   @default("COMPLETED") // ACTIVE, COMPLETED, CANCELLED
  executionDate DateTime? // When the activity actually happened, defaults to creation time in application code
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  featureRequests ActivityFeatureRequest[]

  @@map("activities")
}

model FeatureRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  status      String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, REJECTED
  category    String?  // UI/UX, Backend, Integration, Performance, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  activities ActivityFeatureRequest[]

  @@map("feature_requests")
}

model ActivityFeatureRequest {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  activityId      String @db.ObjectId
  featureRequestId String @db.ObjectId
  createdAt       DateTime @default(now())

  // Relationships
  activity       Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  featureRequest FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)

  @@unique([activityId, featureRequestId])
  @@map("activity_feature_requests")
} 